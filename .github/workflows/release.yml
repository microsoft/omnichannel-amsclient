name: Release CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CACHE_CONTROL_HEADER: public, max-age=86400, s-maxage=259200, must-revalidate
  BASE_URL_DEV: https://comms-test.omnichannelengagementhub.com/ams
  BASE_URL_PROD: https://comms.omnichannelengagementhub.com/ams

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install az
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az
      - name: Checking out for ${{ github.ref }}
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 12.X

      - name: Update package version
        run: npx version-from-git --no-git-tag-version
        if: ${{ startsWith(github.ref, 'refs/heads/') }}

      - name: Read package.json
        id: read-package-json
        run: |
          echo "::set-output name=name::$(cat package.json | jq -r '.name')"
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"
      - name: Install packages
        run: npm install

      - name: Build CDN & NPM packages
        run: |
          npm run build:tsc && npx cross-env BASE_URL="${{ env.BASE_URL_DEV }}" SDK_VERSION="${{ steps.read-package-json.outputs.version }}" node ./esbuild.config.js

      - name: Prepare CDN packages
        run: |
          mkdir ${{ steps.read-package-json.outputs.version }}
          cp dist/SDK.js ${{ steps.read-package-json.outputs.version }}
          cp dist/SDK.min.js ${{ steps.read-package-json.outputs.version }}
          cp dist/iframe.js ${{ steps.read-package-json.outputs.version }}
          cp dist/iframe.min.js ${{ steps.read-package-json.outputs.version }}
          cp dist/iframe.html ${{ steps.read-package-json.outputs.version }}
      - name: Publish CDN package to versioned blob (dev)
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGDEV }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "ams/${{ steps.read-package-json.outputs.version }}" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"
      - name: Publish CDN package to latest blob (dev)
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGDEV }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "ams/latest" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"
      - name: Publish CDN package to versioned blob (prod)
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGPROD }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "ams/${{ steps.read-package-json.outputs.version }}" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"
      - name: Publish CDN package to latest blob (prod)
        run: |
          az storage blob upload-batch --connection-string "${{ secrets.BLOBCONNECTIONSTRINGPROD }}" --source "${{ steps.read-package-json.outputs.version }}" --destination "ams/latest" --content-cache-control "${{ env.CACHE_CONTROL_HEADER }}"
      - name: Npm packaging
        run: npm pack

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.1.4
        with:
          name: npm-tarball
          path: '*.tgz'

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - uses: actions/download-artifact@v2.0.5
        with:
          name: npm-tarball

      - name: Read package.json
        id: read-package-json
        run: |
          echo "::set-output name=name::$(tar xOf *.tgz package/package.json | jq -r '.name')"
          echo "::set-output name=version::$(tar xOf *.tgz package/package.json | jq -r '.version')"
          echo "::set-output name=tarball::$(ls *.tgz)"
          echo "::set-output name=date::$(date +%Y-%m-%d)"
      - name: Run npm publish ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish *.tgz --tag main --access public
          npm dist-tag add ${{ steps.read-package-json.outputs.name }}@${{ steps.read-package-json.outputs.version }} latest